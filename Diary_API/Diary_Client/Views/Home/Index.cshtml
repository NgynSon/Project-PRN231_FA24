<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/style.css">

</head>

<body>
    @{
        string? userName = Context.Session.GetString("Username");
        var userId = Context.Session.GetString("UserId");
        string? name = Context.Session.GetString("Name");
    }

    <div class="container">
        <div id="posts-container" style="width: 100%; height: 100%;"></div>
    </div>
    <script>
        const loggedInUserId = @userId

        document.addEventListener('DOMContentLoaded', () => {
            fetchPosts();
        });

        async function fetchPosts() {
            try {
                const response = await fetch('https://localhost:7132/api/Post');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const posts = await response.json();
                renderPosts(posts);
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }

        function renderPosts(posts) {
            const container = document.getElementById('posts-container');
            
            container.innerHTML = '';

            posts.forEach(post => {
                const postElement = document.createElement('div');
                postElement.className = 'post';
                postElement.innerHTML = `
                            <div class="post-header">
                                <div class="user-info">
                                    <img src="https://localhost:7229/images/profile-pic.png" alt="" width="50" height="50">
                                    <span style="font-size: 30px; font-weight: bold;">${post.user.name}</span>
                                </div>
                                <div class="post-date">${new Date(post.date).toLocaleDateString()}</div>
                            </div>
                            <div class="post-content">${post.postContent}</div>
                            <div class="interact-buttons">
                                <button id="like-btn-${post.id}" onclick="toggleLikePost(${post.id})">Like (${post.interacts.length})</button>
                                <button onclick="toggleComments(${post.id})">Comments</button>
                            </div>
                            <div id="comments-${post.id}" class="comments"></div>
                        `;
                container.appendChild(postElement);

                if (loggedInUserId) {
                    const liked = post.interacts.some(interact => interact.userId === loggedInUserId);
                    const likeBtn = document.getElementById(`like-btn-${post.id}`);
                    likeBtn.textContent = liked ? `Like (${post.interacts.length})` : `Like (${post.interacts.length})`;
                }
            });
        }

        async function toggleLikePost(postId) {
            if (loggedInUserId == null) {
                alert('Vui lòng đăng nhập để thích bài viết.');
                return;
            }

            const likeBtn = document.getElementById(`like-btn-${postId}`);
            const liked = likeBtn.textContent.startsWith('Unlike');

            const interact = {
                userId: loggedInUserId,
                postId: postId,
                likeDate: new Date().toISOString()
            };

            try {
                const method = liked ? 'POST' : 'POST';

                const response = await fetch(`https://localhost:7132/api/Interact/${loggedInUserId}/${postId}`, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(interact)
                });

                if (!response.ok) {
                    throw new Error('Lỗi mạng, vui lòng thử lại.');
                }

                fetchPosts();
                
            } catch (error) {
                console.error('Lỗi fetch:', error);
            }
        }

        async function toggleComments(postId) {
            const commentsContainer = document.getElementById(`comments-${postId}`);
            if (commentsContainer.style.display === 'block') {
                commentsContainer.style.display = 'none';
                commentsContainer.innerHTML = '';
            } else {
                const response = await fetch(`https://localhost:7132/api/Comment/post/${postId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const comments = await response.json();

                commentsContainer.innerHTML = `
                            <div class="add-comment-box">
                                <textarea id="comment-input-${postId}" placeholder="Comment"></textarea>
                                <button onclick="addComment(${postId})">Comment</button>
                            </div>
                        `;

                commentsContainer.innerHTML += comments.map(comment => `
                            <div class="comment">
                                <div><strong>${comment.user.username}</strong></div>
                                <div class="comment-content">${comment.commentContent}</div>
                                <div id="replies-${comment.id}" class="replies"></div>
                                <div class="add-reply-box">
                                    <textarea id="reply-input-${comment.id}" placeholder="Reply"></textarea>
                                    <button onclick="addReply(${comment.id})">Reply</button>
                                </div>
                            </div>
                        `).join('');

                commentsContainer.style.display = 'block';

                comments.forEach(comment => {
                    fetchReplies(comment.id);
                });
            }
        }

        async function addComment(postId) {
            if (!loggedInUserId) {
                alert('Please log in to add a comment.');
                return;
            }

            const commentInput = document.getElementById(`comment-input-${postId}`);
            const commentContent = commentInput.value.trim();
            if (!commentContent) {
                alert('Comment cannot be empty.');
                return;
            }

            const comment = {
                userId: loggedInUserId,
                postId: postId,
                commentContent: commentContent
            };

            const response = await fetch('https://localhost:7132/api/Comment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(comment)
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            toggleComments(postId)
            toggleComments(postId)
        }

        async function addReply(commentId) {
            if (!loggedInUserId) {
                alert('Please log in to add a reply.');
                return;
            }

            const replyInput = document.getElementById(`reply-input-${commentId}`);
            const replyContent = replyInput.value.trim();
            if (!replyContent) {
                alert('Reply cannot be empty.');
                return;
            }

            const reply = {
                userId: loggedInUserId,
                commentId: commentId,
                replyContent: replyContent
            };

            const response = await fetch('https://localhost:7132/api/Reply', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(reply)
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            fetchReplies(commentId);
            replyInput.value = '';
        }

        async function fetchReplies(commentId) {
            const repliesContainer = document.getElementById(`replies-${commentId}`);
            const response = await fetch(`https://localhost:7132/api/Reply/comment/${commentId}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const replies = await response.json();
            repliesContainer.innerHTML = replies.map(reply => `
                                    <div class="reply">
                                        <div><strong>${reply.user.username}</strong></div>
                                        <div class="reply-content">${reply.replyContent}</div>
                                    </div>
                                `).join('');
        }
    </script>
</body>

</html>
