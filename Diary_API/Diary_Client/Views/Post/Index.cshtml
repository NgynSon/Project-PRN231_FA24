<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diary - Home</title>
</head>
@using Newtonsoft.Json;
<style>
    .post-index {
        display: flex;
        flex-direction: column;
        align-items: center;
        max-width: 600px;
        margin: auto;
        margin-top: 0;
        padding: 20px;
        flex-grow: 1;
    }

        .post-index h2 {
            font-size: 24px;
            margin-bottom: 15px;
        }

        .post-index textarea {
            width: 100%;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 10px;
            font-size: 16px;
        }

        .post-index label {
            margin-top: 10px;
        }

        .post-index button {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
        }

            .post-index button:hover {
                background-color: #0056b3;
            }

    .post {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 15px;
        margin: auto;
        margin-top: 10px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .post-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .post-content {
        margin-top: 10px;
    }

    .interact-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    .comments {
        margin-top: 10px;
    }
</style>
<body>
    @{
        string? userName = Context.Session.GetString("Username");
        var userId = Context.Session.GetString("UserId");
        string? name = Context.Session.GetString("Name");

    }
    

    <div class="post-index">
        @if (userId != null)
        {
            <div>
                <h2>Create Post</h2>
                <textarea id="new-post-content" placeholder="Write your post here..." style="width: 500px; height: 100px;"></textarea>
                <br>
                <label for="new-post-public">Public</label>
                <input type="checkbox" id="new-post-public" checked>
                <br>
                <button onclick="addPost()">Add Post</button>
            </div>
        }
        else
        {
            <div style="text-align: center; position: relative;top: 10%;">
                <h2>YOU NEED LOGIN</h2>
            </div>
        }
        <div id="posts-container" style="width: 500px; height: 300px;"></div>
    </div>
   

    <script>
        const loggedInUserId = @userId;

        document.addEventListener('DOMContentLoaded', () => {
            fetchPosts();
        });

        async function fetchPosts() {
            try {
                const response = await fetch('https://localhost:7132/api/Post/user/@userId');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const posts = await response.json();
                renderPosts(posts);
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }

        function renderPosts(posts) {
            const container = document.getElementById('posts-container');
            container.innerHTML = '';

            posts.forEach(post => {
                const postElement = document.createElement('div');
                postElement.className = 'post';
                postElement.innerHTML = `
                            <div class="post-header">
                                <div class="user-info">
                                    <img src="https://localhost:7229/images/profile-pic.png" alt="" width="50" height="50">
                                    <span style="font-size: 30px; font-weight: bold;">${post.user.name}</span>
                                    
                                </div>
                                                <div class="post-date">${new Date(post.date).toLocaleDateString()}</div>
                            </div>

                            <div class="post-content" id="post-content-${post.id}">
                                <div id="post-content-display-${post.id}">
                                    ${post.postContent}
                                </div>
                                <textarea class="edit-post-content" id="edit-post-content-${post.id}" style="display: none;">${post.postContent}</textarea>
                                <div class="edit-post-controls" id="edit-post-controls-${post.id}" style="display: none;">
                                    <button onclick="saveEditedPost(${post.id})">Save</button>
                                    <button onclick="cancelEditPost(${post.id})">Cancel</button>
                                </div>
                            </div>
                            <textarea class="edit-post-content" id="edit-post-content-${post.id}" style="display: none;">${post.postContent}</textarea>
                            <div class="interact-buttons">
                                <button id="like-btn-${post.id}" onclick="toggleLikePost(${post.id})">Like (${post.interacts.length})</button>
                                <button onclick="toggleComments(${post.id})">Comments</button>
                                <button id="public-btn-${post.id}" onclick="togglePublicPost(${post.id})">Public</button>
                                ${post.userId === loggedInUserId ? `
                                        <button onclick="toggleEditPost(${post.id})">Edit</button>
                                <button onclick="deletePost(${post.id})">Delete</button>
                                ` : ''}
                            </div>
                            <div id="comments-${post.id}" class="comments"></div>
                        `;
                container.appendChild(postElement);

                if (loggedInUserId) {
                    const liked = post.interacts.some(interact => interact.userId === loggedInUserId);
                    const likeBtn = document.getElementById(`like-btn-${post.id}`);
                    likeBtn.textContent = liked ? `Like (${post.interacts.length})` : `Like (${post.interacts.length})`;

                    const publicBtn = document.getElementById(`public-btn-${post.id}`);
                    publicBtn.textContent = post.isPublic ? 'Private' : 'Public';
                }
            });
        }
        
        async function toggleLikePost(postId) {
            if (loggedInUserId == null) {
                alert('Please log in to like the post.');
                return;
            }
            const likeBtn = document.getElementById(`like-btn-${postId}`);
            const liked = likeBtn.textContent.startsWith('Unlike');
            const interact = {
                userId: loggedInUserId,
                postId: postId,
                likeDate: new Date().toISOString()
            };
            const method = liked ? 'POST' : 'POST';
            const response = await fetch(`https://localhost:7132/api/Interact/${loggedInUserId}/${postId}`, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(interact)
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            fetchPosts();
        }

        async function toggleComments(postId) {
            const commentsContainer = document.getElementById(`comments-${postId}`);
            if (commentsContainer.style.display === 'block') {
                commentsContainer.style.display = 'none';
                commentsContainer.innerHTML = '';
            } else {
                const response = await fetch(`https://localhost:7132/api/Comment/post/${postId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const comments = await response.json();

                commentsContainer.innerHTML = `
                            <div class="add-comment-box">
                                <textarea id="comment-input-${postId}" placeholder="Comment"></textarea>
                                <button onclick="addComment(${postId})">Comment</button>
                            </div>
                        `;

                commentsContainer.innerHTML += comments.map(comment => `
                            <div class="comment">
                                <div><strong>${comment.user.username}</strong></div>
                                <div class="comment-content">${comment.commentContent}</div>
                                <div id="replies-${comment.id}" class="replies"></div>
                                <div class="add-reply-box">
                                    <textarea id="reply-input-${comment.id}" placeholder="Reply"></textarea>
                                    <button onclick="addReply(${comment.id})">Reply</button>
                                </div>
                            </div>
                        `).join('');

                commentsContainer.style.display = 'block';

                comments.forEach(comment => {
                    fetchReplies(comment.id);
                });
            }
        }

        async function addComment(postId) {
            if (!loggedInUserId) {
                alert('Please log in to add a comment.');
                return;
            }

            const commentInput = document.getElementById(`comment-input-${postId}`);
            const commentContent = commentInput.value.trim();
            if (!commentContent) {
                alert('Comment cannot be empty.');
                return;
            }

            const comment = {
                userId: loggedInUserId,
                postId: postId,
                commentContent: commentContent
            };
            const response = await fetch('https://localhost:7132/api/Comment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(comment)
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            toggleComments(postId);
            toggleComments(postId);
        }

        async function addReply(commentId) {
            if (!loggedInUserId) {
                alert('Please log in to add a reply.');
                return;
            }
            const replyInput = document.getElementById(`reply-input-${commentId}`);
            const replyContent = replyInput.value.trim();
            if (!replyContent) {
                alert('Reply cannot be empty.');
                return;
            }
            const reply = {
                userId: loggedInUserId,
                commentId: commentId,
                replyContent: replyContent
            };
            const response = await fetch('https://localhost:7132/api/Reply', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(reply)
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            fetchReplies(commentId);
            replyInput.value = '';  // Clear the input after successful reply
        }

        async function fetchReplies(commentId) {
            try {
                const response = await fetch(`https://localhost:7132/api/Reply/comment/${commentId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const replies = await response.json();
                const repliesContainer = document.getElementById(`replies-${commentId}`);
                repliesContainer.innerHTML = replies.map(reply => `
                            <div class="reply">
                                <div><strong>${reply.user.username}</strong></div>
                                <div class="reply-content">${reply.replyContent}</div>
                            </div>
                        `).join('');
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }

        async function togglePublicPost(postId) {
            if (loggedInUserId == null) {
                alert('Please log in to change post visibility.');
                return;
            }
            const publicBtn = document.getElementById(`public-btn-${postId}`);
            const isPublic = publicBtn.textContent.startsWith('Public');
            const post = {
                userId: loggedInUserId,
                postId: postId,
                isPublic: isPublic
            };
            const response = await fetch(`https://localhost:7132/api/Post/${postId}/public?isPublic=${isPublic}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(post)
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            fetchPosts();
        }

        async function addPost() {
            if (!loggedInUserId) {
                alert('Please log in to add a post.');
                return;
            }
            const postContentInput = document.getElementById('new-post-content');
            const postContent = postContentInput.value.trim();
            const isPublic = document.getElementById('new-post-public').checked;
            if (!postContent) {
                alert('Post content cannot be empty.');
                return;
            }
            const post = {
                userId: loggedInUserId,
                postContent: postContent,
                isPublic: isPublic
            };
            const response = await fetch('https://localhost:7132/api/Post', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(post)
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            postContentInput.value = '';  // Clear the input after successful post
            document.getElementById('new-post-public').checked = false; // Reset the checkbox

            fetchPosts();
        }

        async function editPost(postId) {
            const postContentElement = document.getElementById(`post-content-${postId}`);
            const currentContent = postContentElement.textContent;
            const newContent = prompt('Edit your post:', currentContent);
            if (newContent === null) {
                return; // Người dùng hủy sửa
            }
            const post = {
                postContent: newContent
            };
            const response = await fetch(`https://localhost:7132/api/Post/${postId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(post)
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            fetchPosts();
        }

        async function deletePost(postId) {
            if (!confirm('Are you sure you want to delete this post?')) {
                return;
            }
            const response = await fetch(`https://localhost:7132/api/Post/${postId}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            fetchPosts();
        }


        //update post
        function toggleEditPost(postId) {
            const postContentDisplay = document.getElementById(`post-content-display-${postId}`);
            const editPostContent = document.getElementById(`edit-post-content-${postId}`);
            const editControls = document.getElementById(`edit-post-controls-${postId}`);

            postContentDisplay.style.display = 'none';
            editPostContent.style.display = 'block';
            editControls.style.display = 'block';
            editPostContent.value = postContentDisplay.innerText.trim();
        }

        async function saveEditedPost(postId) {
            const editPostContent = document.getElementById(`edit-post-content-${postId}`);
            const newContent = editPostContent.value.trim();

            const post = {
                postContent: newContent
            };

            try {
                const response = await fetch(`https://localhost:7132/api/Post/${postId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(post)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                // Update UI
                const postContentDisplay = document.getElementById(`post-content-display-${postId}`);
                postContentDisplay.innerText = newContent;

                cancelEditPost(postId); // Hide edit controls after save
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }

        function cancelEditPost(postId) {
            const postContentDisplay = document.getElementById(`post-content-display-${postId}`);
            const editPostContent = document.getElementById(`edit-post-content-${postId}`);
            const editControls = document.getElementById(`edit-post-controls-${postId}`);

            postContentDisplay.style.display = 'block';
            editPostContent.style.display = 'none';
            editControls.style.display = 'none';
        }

    </script>
</body>
</html>
